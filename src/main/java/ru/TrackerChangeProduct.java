package ru;

/*
  класс TrackerChangeProduct для изменения продукта в множестве
  имеет свое меню, в котором пользователь выбирает необходимые к изменению поля
  данный класс унаследован от класса Tracker с целью использовать метод findProduct() и иметь доступ к множеству с продуктами
  т.к. класс Tracker унаследован от класса Input, то все его предки также могут использовать методы класса Input
  имеет метод для определения наличия искомого продукта в множестве
  имеет метод для отображения меню для выбора необходимых к изменению полей
  имеет методы для непосредственного изменения полей
 */
public class TrackerChangeProduct extends Tracker {

    // переменные для хранения пунктов меню
    final String menuChangeSectionNAME = ". Наименование\n";
    final String menuChangeSectionPRICE = ". Цена\n";
    final String menuChangeSectionID = ". Артикул\n";
    final String menuChangeSectionCANCEL = ". Отмена\n";

    // переменные для хранения нумерации пунктов меню
    final int nameChange = 0;
    final int priceChange = 1;
    final int idChange = 2;
    final int cancelChange = 3;

    /*
      метод для определения наличия искомого продукта в множестве
      аргументом является артикул продукта
      данный метод использует метод findProduct() класса предка Tracker
      */
    public void changeProductThereIs(int id) {

        // если условие выполняется: продукт имеется в множестве, то выводится меню для выбора необходимых к изменению полей
        if (findProduct(id)) {

            // вызов метода для вывода меню
            changeProductMenu(id);

        // если условие не выполняется, то выводится сообщение об этом, а затем делается вызов основного меню программы
        } else {

            System.out.println("совпадений не найдено");

            // выводим основное меню программы
            new UserUI().init();
        }
    }

    /*
      метод отображения меню для выбора необходимых к изменению полей
      метод запрашивает
     */
    private void changeProductMenu(int id) {

        // переменная для сбора меню
        String menuChangeStart = nameChange + menuChangeSectionNAME + priceChange + menuChangeSectionPRICE +
                idChange + menuChangeSectionID + cancelChange + menuChangeSectionCANCEL;

        // вывод меню
        System.out.println("Что изменить в найденом продукте...");
        System.out.println(menuChangeStart);

        // передача введеной пользователем команды и артикула продукта методу changeProductField
        changeProductField(inputInt(), id);

    }

    /*
      метод для обработки введеной пользователем команды
      аргументами являются введеная команда(соответствует выбранному пункту меню) и артикул продукта
     */
    private void changeProductField(int choiceChange, int id) {

        // проверка, что введеная команда наодится в диапазоне чисел, соответствующих пунктам меню
        if (choiceChange > 3 || choiceChange < 0) {
            System.out.println("Необходимо указать цифру, соответствующую выбранному полю меню...");

        /*
          если команда соответствует пункту на изменение имени продута,
          то программа указывает на необходимость ввести новое имя продукта,
          затем передает введеные данные и артикул продукта методу для изменения имени,
          после этого выводит меню для выбора необходимых к изменению полей
          */
        } else if (choiceChange == nameChange) {

            System.out.println("Введи новое имя...");

            // передача введенного нового имени продукта для изменения имени у продукта в множестве
            changeProductName(inputString(), id);

            // вывод меню для выбора необходимых к изменению полей
            changeProductMenu(id);

        /*
          если команда соответствует пункту на изменение цены продута,
          то программа указывает на необходимость ввести новую цену продукта,
          затем передает введеные данные и артикул продукта методу для изменения цены,
          после этого выводит меню для выбора необходимых к изменению полей
          */
        } else if (choiceChange == priceChange) {

            System.out.println("Введи новую цену...");

            // передача введенной новой цены продукта для изменения имени у продукта в множестве
            changeProductPrice(inputInt(), id);

            // вывод меню для выбора необходимых к изменению полей
            changeProductMenu(id);


         /*
          если команда соответствует пункту на изменение артикула продута,
          то программа указывает на необходимость ввести новый артикул продукта,
          затем передает введеные данные и артикул продукта методу для изменения цены,
          после этого выводит меню для выбора необходимых к изменению полей
          */
        } else if (choiceChange == idChange) {

            System.out.println("Введи новый артикул...");

            // передача введенного нового артикула продукта для изменения артикула у продукта в множестве
            changeProductId(inputInt(), id);

            // вывод меню для выбора необходимых к изменению полей
            changeProductMenu(id);

        /*
          если команда соответствует пункту ОТМЕНА, то данный класс и класс Tracker завершают работу,
          управление передается классу UserUI и выводится основное меню программы
          */
        } else if (choiceChange == cancelChange) {
        }
    }

    /*
      метод для изменения имени продукта
      по артикулу находится необходимый объект продукта в множестве,
      на него создает ссылка prod,
      по этой ссылке у данного объекта с помощью метода setName() класса Product устанавливается новое имя,
      затем данный объект продукта обратно заносится в множество,
      т.к. ключ остался прежним, то  происходи замена уже имеющегося объекта с таким ключом на новый
     */
    public void changeProductName(String nameNew, int id) {
        Product prod = products.get(id);
        prod.setName(nameNew);
        products.put(id, prod);
    }

    /*
      метод для изменения цены продукта
      по артикулу находится необходимый объект продукта в множестве,
      на него создает ссылка prod,
      по этой ссылке у данного объекта с помощью метода setPrice() класса Product устанавливается новая цена,
      затем данный объект продукта обратно заносится в множество,
      т.к. ключ остался прежним, то  происходи замена уже имеющегося объекта с таким ключом на новый
     */
    public void changeProductPrice(int priceNew, int id) {
        Product prod = products.get(id);
        prod.setPrice(priceNew);
        products.put(id, prod);
    }

    /*
      метод для изменения артикула продукта
      по артикулу-аргументу находится необходимый объект продукта в множестве,
      на него создает ссылка prod,
      по этой ссылке у данного объекта с помощью метода setId() класса Product устанавливается новая цена,
      затем данный объект продукта обратно заносится в множество,
      т.к. ключ остался прежним, то  происходи замена уже имеющегося объекта с таким ключом на новый
     */
    public void changeProductId(int idNew, int id) {
        Product prod = products.get(id);
        prod.setId(idNew);
        products.put(prod.getId(), prod);
        products.remove(id);
    }
}

